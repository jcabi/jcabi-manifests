 ------
 Static Reader of META-INF/MANIFEST.MF Files
 ------
 Yegor Bugayenko
 ------
 2012-11-18
 ------

~~
~~ #set($sign="$")
~~ Copyright (c) 2012-2025, jcabi.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the jcabi.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~

Static Reader of META-INF/MANIFEST.MF Files

  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<com.jcabi.manifests.Manifests>>>}}
  is a convenient static reader of <<<META-INF/MANIFEST.MF>>> files. Try this:

+--
import com.jcabi.manifests.Manifests;
public class Main {
  public static void main(String[] args) {
    String version = Manifests.read("JCabi-Version");
    System.out.println("version is " + version);
  }
}
+--

  As {{{http://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html}Oracle documentation}}
  says the <<<META-INF/MANIFEST.MF>>> is a special file that
  can contain information about the files packaged in a JAR file. Every
  JAR file in your classpath contains its own manifest. Every manifest
  consists of attributes and values. For example, this is
  <<<META-INF/MANIFEST.MF>>> of
  {{{http://repo1.maven.org/maven2/junit/junit/4.10/junit-4.10.jar}<<<junit-4.10.jar>>>}}:

+--
Manifest-Version: 1.0
Ant-Version: Apache Ant 1.8.2
Created-By: 1.6.0_26-b03-384-10M3425 (Apple Inc.)
+--

  This manifest was generated by the author of JUnit JAR package
  and contains three attributes <<<Manifest-Version>>>, <<<Ant-Version>>>,
  and <<<Created-By>>>. When a JAR package is available in the classpath your
  application can retrieve these attributes from its manifest.
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}
  utility class is a convenient reader of all attributes from all
  manifest files available in the classpath. All you need to provide is
  a name of the desired attribute.

  <<<MANIFEST.MF>>> files may become an effective alternative
  to <<<.properties>>> files when
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}
  utility class is used. You don't need to worry about finding the right
  location of the right <<<.properties>>>, loading it into memory, and
  dealing with exceptions. All you do is reading from
  {{{./apidocs-${project.version}/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}}:

+--
public class Main {
  public static void main(String[] args) {
    System.out.println("JAR was created by " + Manifests.read("Created-By"));
  }
}
+--

  To put information into your manifest
  {{{http://maven.apache.org/plugins/maven-jar-plugin/}maven-jar-plugin}} or
  {{{http://maven.apache.org/plugins/maven-war-plugin/}maven-war-plugin}}
  can be used, for example:

+--
<plugin>
  <artifactId>maven-war-plugin</artifactId>
  <configuration>
    <archive>
      <manifestEntries>
        <Foo-Version>${sign}{project.version}</Foo-Version>
      </manifestEntries>
    </archive>
  </configuration>
</plugin>
+--

  After packaging of the <<<WAR>>> artifact its <<<MANIFEST.MF>>> file
  will contain this attribute (among some others):

+--
Foo-Version: 1.0-SNAPSHOT
+--

  Read more about using <<<MANIFEST.MF>>> file for
  {{{./versioning.html}versioning}} of your Java application.
  Also pay attention to the
  {{{./servlets.html}difference between JAR and WAR applications}}.
  Besides that, there is a number of best practices related to
  {{{./mocking.html}unit testing and mocking}} of <<<MANIFEST.MF>>> attributes.

  The only dependency you need in your class path is
  (you can also download
  {{{http://repo1.maven.org/maven2/com/jcabi/jcabi-manifests/${project.version}/jcabi-manifests-${project.version}.jar}<<<jcabi-manifests-${project.version}.jar>>>}}
  and add it to the classpath):

+--
<dependency>
  <groupId>com.jcabi</groupId>
  <artifactId>jcabi-manifests</artifactId>
  <version>${project.version}</version>
</dependency>
+--

  If you are outside of WAR application you should add Servlet API
  to compile-time classpath:

+--
<dependency>
  <groupId>jakarta.servlet</groupId>
  <artifactId>jakarta.servlet-api</artifactId>
  <version>5.0.0</version>
  <scope>provided</scope>
</dependency>
+--

* Cutting Edge Version

  If you want to use current version of the product, you can do it with
  this configuration in your <<<pom.xml>>>:

+--
<repositories>
  <repository>
    <id>oss.sonatype.org</id>
    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
  </repository>
</repositories>
<dependencies>
  <dependency>
    <groupId>com.jcabi</groupId>
    <artifactId>jcabi-manifests</artifactId>
    <version>${snapshotVersion}</version>
  </dependency>
</dependencies>
+--
